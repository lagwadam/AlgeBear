using Microsoft.VisualStudio.TestTools.UnitTesting;
using UtilityLibraries;
using System.Diagnostics;

namespace ExpressionLibraryTest;

[TestClass]
public class ExpressionVisitorsTest
{
    [TestMethod]
    public void ExpressionVariablesVisitorSumTest()
    {
        var visitor = new ExpressionVariablesVisitor();
        var constant = new Constant(2.5);
        var variable = new Variable("Œ±");

        var expression = new Sum(constant, variable);

        expression.Accept(visitor);

        var actualVariables = visitor.Variables;
        // Debug.WriteLine();
        Debug.WriteLine(actualVariables);
        Debug.WriteLine(expression.ToString());

        Assert.AreEqual("Œ±", visitor.Variables.Single(), "Alpha should be a variable, and there should be one variable.");
    }

    [TestMethod]
    public void ExpressionVariablesVisitorSumAndProductTestTest()
    {
        var visitor = new ExpressionVariablesVisitor();
        var constant = new Constant(2.5);
        var variable = new Variable("Œ±");
 
        // innerSum = Œ± + 2(Œ≤ + Œ≥)
        var innerSum = new Sum(new Variable("Œ±"), 
            new Product(new Constant(2), new Sum(new Variable("Œ≤"), new Variable("Œ≥"))));

        // sum = 321 + Œ¥(Œ± + 2(Œ≤ + Œ≥))
        var sum = new Sum(new Constant(321), new Product(new Variable("Œ¥"), innerSum));
        
        var expression = new Product(new Constant(3), sum);
        
        expression.Accept(visitor);

        Debug.WriteLine(expression.ToString());

        var vars = visitor.Variables;

        Assert.AreEqual(4, visitor.Variables.Count);
        Assert.IsTrue(vars.Contains("Œ±"));
        Assert.IsTrue(vars.Contains("Œ≤"));
        Assert.IsTrue(vars.Contains("Œ≥"));
        Assert.IsTrue(vars.Contains("Œ¥"));
    }

    [TestMethod]
    public void CompareVisitorSumTest()
    {
        var visitor = new EquivalencyVisitor();
        var constant = new Constant(2.5);
        var variable = new Variable("Œ±");

        var expression = new Sum(new Constant(2.5), new Variable("Œ±"));
        
        var matched = new Sum(new Constant(2.5), new Constant(2.5));

        bool isValid = visitor.Visit(expression, matched);
        foreach(string transformation in visitor.Transformations)
        {
            Debug.WriteLine(transformation);
        }

        Assert.IsTrue(isValid);
        Assert.AreEqual("Œ± ‚Ü¶ 2.5", visitor.Transformations.Single(), "There should be one variable with alpha goes to 2.5");
    }

        [TestMethod]
    public void CompareVisitorProductSumTest()
    {
        var visitor = new EquivalencyVisitor();
        var constant = new Constant(2.5);
        var variable = new Variable("Œ±");

        var left = new Sum(new Constant(2.5), new Variable("Œ±"));
        var right = new Sum(new Constant(7), new Variable("ùú∑"));

        var matchedLeft = new Sum(new Constant(2.5), new Constant(2.5));
        var matchedRight = new Sum(new Constant(7), new Constant(7));

        var expression = new Product(left, right);
        var matched = new Product(matchedLeft, matchedRight);

        bool isValid = visitor.Visit(expression, matched);
        foreach(string transformation in visitor.Transformations)
        {
            Debug.WriteLine(transformation);
        }

        Assert.IsTrue(isValid);
        Assert.AreEqual("Œ± ‚Ü¶ 2.5", visitor.Transformations.First(), "First transformation needs alpha goes to 2.5");
        Assert.AreEqual("ùú∑ ‚Ü¶ 7", visitor.Transformations.Last(), "The other transformation needs beta goes to 2.5");
    }
}